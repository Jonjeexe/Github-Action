name: Generate Device Tree (X6815D)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-tree:
    runs-on: ubuntu-latest
    env:
      FIRMWARE_ID: "1-65PV4enM35j72dhMa4STSMwLNdqR-NV" # Google Drive ID
      TG_CHAT_ID: "1910625218"
      TG_BOT_TOKEN: "7863915048:AAG0PjWioCIeIlP9kDdvsTDkKfJ2J57dR-Q"

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y git python3 python3-pip unzip curl p7zip-full
        pip3 install dumpyara aospdtgen gdown

    - name: Download firmware
      run: |
        mkdir -p firmware
        gdown "$FIRMWARE_ID" -O firmware/fw.zip
        ls -lh firmware

    - name: Extract firmware
      run: |
        cd firmware
        # Try dumpyara first
        python3 -m dumpyara fw.zip || echo "‚ö†Ô∏è dumpyara failed, trying 7z..."
        # If dumpyara produced nothing useful, fallback to 7z
        if [ $(find . -maxdepth 1 -type d | wc -l) -le 1 ]; then
          mkdir extracted && cd extracted
          7z x ../fw.zip
          cd ..
        fi
        ls -lhR

    - name: Find dump dir
      id: dump
      run: |
        if [ -d "firmware/extracted" ]; then
          DUMP_DIR="firmware/extracted"
        else
          DUMP_DIR=$(find firmware -maxdepth 1 -type d ! -path firmware | head -n1)
        fi
        echo "dump_dir=$DUMP_DIR" >> $GITHUB_OUTPUT
        echo "Using dump dir: $DUMP_DIR"
        ls -lh "$DUMP_DIR" || true

    - name: Generate device tree
      run: |
        DUMP="${{ steps.dump.outputs.dump_dir }}"
        mkdir -p device/infinix/X6815D
        python3 -m aospdtgen -o device/infinix/X6815D "$DUMP" || echo "‚ö†Ô∏è aospdtgen failed, check logs"
        ls -lh device/infinix/X6815D || true

    - name: Extract boot.img & prebuilt kernel
      run: |
        mkdir -p device/infinix/X6815D/prebuilt
        DUMP="${{ steps.dump.outputs.dump_dir }}"
        BOOTIMG=$(find "$DUMP" -type f -iname "boot*.img" | head -n1 || true)
        if [ -n "$BOOTIMG" ]; then
          echo "Found boot.img: $BOOTIMG"
          curl -L -o magisk.zip https://github.com/topjohnwu/Magisk/releases/latest/download/Magisk-v28.1.zip || true
          unzip -j magisk.zip "*/magiskboot" -d .
          chmod +x magiskboot || true
          ./magiskboot unpack "$BOOTIMG" || true
          mv -f kernel* dtb* dtbo.img* ramdisk.cpio* device/infinix/X6815D/prebuilt/ 2>/dev/null || true
        else
          echo "‚ö†Ô∏è No boot.img found, skipping kernel extraction"
        fi
        ls -lh device/infinix/X6815D/prebuilt || true

    - name: Zip device tree
      run: |
        if [ -d "device/infinix/X6815D" ] && [ "$(ls -A device/infinix/X6815D)" ]; then
          zip -r device-tree-X6815D.zip device/infinix/X6815D
        else
          echo "‚ö†Ô∏è No device tree generated!"
          echo "NO_TREE=true" >> $GITHUB_ENV
        fi

    - name: Upload device tree artifact
      if: env.NO_TREE != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: device-tree-X6815D
        path: device-tree-X6815D.zip

    - name: Save workflow logs
      if: always()
      run: |
        mkdir logs
        dmesg > logs/dmesg.txt || true
        journalctl -xe > logs/journal.txt || true

    - name: Upload logs artifact
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: logs

    - name: Telegram notification + send zip
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ] && [ -f "device-tree-X6815D.zip" ]; then
          curl -s -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument" \
            -F chat_id="${TG_CHAT_ID}" \
            -F document=@device-tree-X6815D.zip \
            -F caption="üì¶ Device Tree (X6815D) generated successfully! Run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        else
          curl -s -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT_ID}" \
            -d text="‚ùå Device tree generation failed or empty. Logs available.\nRun: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
